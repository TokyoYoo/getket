<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            min-height: 100vh;
            color: white;
            padding: 2rem;
        }
        
        .header {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .header h1 {
            font-size: 2.5rem;
            font-weight: 300;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .stat-card.total .stat-number { color: #60a5fa; }
        .stat-card.active .stat-number { color: #34d399; }
        .stat-card.expired .stat-number { color: #f87171; }
        
        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .btn {
            padding: 0.7rem 1.5rem;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-danger {
            background: linear-gradient(45deg, #ef4444, #dc2626);
            color: white;
        }
        
        .btn-primary {
            background: linear-gradient(45deg, #3b82f6, #1d4ed8);
            color: white;
        }
        
        .btn-success {
            background: linear-gradient(45deg, #10b981, #059669);
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }
        
        .section {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .section h2 {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            font-weight: 300;
        }
        
        .keys-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        
        .keys-table th,
        .keys-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .keys-table th {
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 1px;
            opacity: 0.8;
        }
        
        .key-cell {
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .status-badge {
            padding: 0.3rem 0.8rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .status-active {
            background: rgba(34, 197, 94, 0.2);
            color: #22c55e;
            border: 1px solid rgba(34, 197, 94, 0.3);
        }
        
        .status-expired {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }
        
        .time-remaining {
            font-weight: 600;
            color: #fbbf24;
        }
        
        .delete-btn {
            background: linear-gradient(45deg, #ef4444, #dc2626);
            color: white;
            border: none;
            padding: 0.4rem 0.8rem;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }
        
        .delete-btn:hover {
            transform: scale(1.05);
        }
        
        .empty-state {
            text-align: center;
            padding: 3rem;
            opacity: 0.6;
        }
        
        .empty-state .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-left-color: #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }
            
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .keys-table {
                font-size: 0.8rem;
            }
            
            .keys-table th,
            .keys-table td {
                padding: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1><%= title %></h1>
        <p>Monitor and manage all generated access keys</p>
    </div>
    
    <div class="stats-grid">
        <div class="stat-card total">
            <div class="stat-number" id="totalKeys"><%= stats.total %></div>
            <div class="stat-label">Total Keys</div>
        </div>
        <div class="stat-card active">
            <div class="stat-number" id="activeKeys"><%= stats.active %></div>
            <div class="stat-label">Active Keys</div>
        </div>
        <div class="stat-card expired">
            <div class="stat-number" id="expiredKeys"><%= stats.expired %></div>
            <div class="stat-label">Expired Keys</div>
        </div>
    </div>
    
    <div class="controls">
        <div>
            <button class="btn btn-primary" onclick="refreshDashboard()">üîÑ Refresh</button>
            <button class="btn btn-danger" onclick="cleanExpiredKeys()">üóëÔ∏è Clean Expired</button>
        </div>
        <div>
            <a href="/checkpoint/1" class="btn btn-success">‚ûï Test Checkpoint Flow</a>
        </div>
    </div>
    
    <div class="loading" id="loading">
        <div class="spinner"></div>
        <p>Loading...</p>
    </div>
    
    <!-- Active Keys Section -->
    <div class="section">
        <h2>üü¢ Active Keys (<%= activeKeys.length %>)</h2>
        
        <% if (activeKeys.length === 0) { %>
            <div class="empty-state">
                <div class="icon">üîë</div>
                <p>No active keys found</p>
            </div>
        <% } else { %>
            <table class="keys-table">
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Created</th>
                        <th>Expires</th>
                        <th>Remaining</th>
                        <th>IP Address</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% activeKeys.forEach(key => { %>
                        <tr>
                            <td class="key-cell" title="<%= key.key %>"><%= key.key %></td>
                            <td><%= new Date(key.createdAt).toLocaleString() %></td>
                            <td><%= new Date(key.expiresAt).toLocaleString() %></td>
                            <td class="time-remaining"><%= key.getRemainingTime() %></td>
                            <td><%= key.ipAddress %></td>
                            <td><span class="status-badge status-active">Active</span></td>
                            <td>
                                <button class="delete-btn" onclick="deleteKey('<%= key._id %>')">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        <% } %>
    </div>
    
    <!-- Expired Keys Section -->
    <div class="section">
        <h2>üî¥ Expired Keys (<%= expiredKeys.length %>)</h2>
        
        <% if (expiredKeys.length === 0) { %>
            <div class="empty-state">
                <div class="icon">‚è∞</div>
                <p>No expired keys found</p>
            </div>
        <% } else { %>
            <table class="keys-table">
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Created</th>
                        <th>Expired</th>
                        <th>IP Address</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% expiredKeys.forEach(key => { %>
                        <tr style="opacity: 0.6;">
                            <td class="key-cell" title="<%= key.key %>"><%= key.key %></td>
                            <td><%= new Date(key.createdAt).toLocaleString() %></td>
                            <td><%= new Date(key.expiresAt).toLocaleString() %></td>
                            <td><%= key.ipAddress %></td>
                            <td><span class="status-badge status-expired">Expired</span></td>
                            <td>
                                <button class="delete-btn" onclick="deleteKey('<%= key._id %>')">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        <% } %>
    </div>
    
    <script>
        // Delete key
        async function deleteKey(keyId) {
            if (!confirm('Are you sure you want to delete this key?')) {
                return;
            }
            
            try {
                const response = await fetch(`/dashboard/delete/${keyId}`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showMessage('Key deleted successfully', 'success');
                    refreshDashboard();
                } else {
                    showMessage('Error deleting key: ' + data.message, 'error');
                }
            } catch (error) {
                showMessage('Error deleting key', 'error');
                console.error(error);
            }
        }
        
        // Clean expired keys
        async function cleanExpiredKeys() {
            if (!confirm('Are you sure you want to delete all expired keys?')) {
                return;
            }
            
            try {
                const response = await fetch('/dashboard/clean-expired', {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showMessage(data.message, 'success');
                    refreshDashboard();
                } else {
                    showMessage('Error cleaning expired keys: ' + data.message, 'error');
                }
            } catch (error) {
                showMessage('Error cleaning expired keys', 'error');
                console.error(error);
            }
        }
        
        // Refresh dashboard
        function refreshDashboard() {
            window.location.reload();
        }
        
        // Show message
        function showMessage(message, type) {
            const messageDiv = document.createElement('div');
            messageDiv.textContent = message;
            messageDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 2rem;
                border-radius: 10px;
                color: white;
                font-weight: 600;
                z-index: 1000;
                animation: slideIn 0.3s ease;
                background: ${type === 'success' ? 'linear-gradient(45deg, #10b981, #059669)' : 'linear-gradient(45deg, #ef4444, #dc2626)'};
            `;
            
            document.body.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.remove();
            }, 3000);
        }
        
        // Auto-refresh every 30 seconds
        setInterval(() => {
            updateStats();
        }, 30000);
        
        // Update stats without full page reload
        async function updateStats() {
            try {
                const response = await fetch('/dashboard/api/stats');
                const data = await response.json();
                
                document.getElementById('totalKeys').textContent = data.total;
                document.getElementById('activeKeys').textContent = data.active;
                document.getElementById('expiredKeys').textContent = data.expired;
            } catch (error) {
                console.error('Error updating stats:', error);
            }
        }
        
        // Add CSS for slide in animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>