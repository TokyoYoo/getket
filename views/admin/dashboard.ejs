<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - GetKey System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f6fa;
            color: #333;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 20px 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            font-size: 1.5em;
            font-weight: bold;
        }
        
        .nav-links {
            display: flex;
            gap: 20px;
        }
        
        .nav-links a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 5px;
            transition: background 0.3s ease;
        }
        
        .nav-links a:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .stat-icon {
            font-size: 3em;
            margin-bottom: 15px;
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #666;
            font-size: 1.1em;
        }
        
        .settings-section {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        
        .section-title {
            font-size: 1.5em;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            color: #555;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        input[type="number"], input[type="url"], input[type="password"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1em;
            transition: border-color 0.3s ease;
        }
        
        input:focus {
            outline: none;
            border-color: #3498db;
        }
        
        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
        }
        
        .btn-success {
            background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
            color: white;
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .webhook-test {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        #webhookResult {
            padding: 10px;
            border-radius: 5px;
            display: none;
        }
        
        @media (max-width: 768px) {
            .nav-container {
                flex-direction: column;
                gap: 15px;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="nav-container">
            <div class="logo">üîë GetKey Admin</div>
            <nav class="nav-links">
                <a href="/admin/dashboard">üìä Dashboard</a>
                <a href="/admin/keys">üóùÔ∏è Manage Keys</a>
                <form action="/admin/logout" method="POST" style="display: inline;">
                    <button type="submit" style="background: none; border: none; color: white; cursor: pointer; padding: 8px 16px; border-radius: 5px; transition: background 0.3s ease;">
                        üö™ Logout
                    </button>
                </form>
            </nav>
        </div>
    </header>

    <div class="container">
        <% if (typeof req !== 'undefined' && req.query.success) { %>
            <div class="alert alert-success">
                ‚úÖ Settings updated successfully!
            </div>
        <% } %>
        
        <% if (typeof req !== 'undefined' && req.query.error) { %>
            <div class="alert alert-error">
                ‚ùå Error updating settings. Please try again.
            </div>
        <% } %>

        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">üîë</div>
                <div class="stat-number"><%= stats.totalKeys %></div>
                <div class="stat-label">Total Keys</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">‚úÖ</div>
                <div class="stat-number"><%= stats.activeKeys %></div>
                <div class="stat-label">Active Keys</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üë•</div>
                <div class="stat-number"><%= stats.totalTokens %></div>
                <div class="stat-label">Total Users</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üìà</div>
                <div class="stat-number"><%= Math.round((stats.activeKeys / Math.max(stats.totalKeys, 1)) * 100) %>%</div>
                <div class="stat-label">Success Rate</div>
            </div>
        </div>

        <!-- Settings Form -->
        <div class="settings-section">
            <h2 class="section-title">‚öôÔ∏è System Settings</h2>
            
            <form action="/admin/settings" method="POST">
                <div class="form-grid">
                    <div>
                        <div class="form-group">
                            <label for="keyExpiryHours">Key Expiry (Hours):</label>
                            <input type="number" id="keyExpiryHours" name="keyExpiryHours" value="<%= settings.keyExpiryHours %>" min="1" max="168" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="linkvertiseId1">Linkvertise ID - Checkpoint 1:</label>
                            <input type="number" id="linkvertiseId1" name="linkvertiseId1" value="<%= settings.linkvertiseId1 %>" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="linkvertiseId2">Linkvertise ID - Checkpoint 2:</label>
                            <input type="number" id="linkvertiseId2" name="linkvertiseId2" value="<%= settings.linkvertiseId2 %>" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="linkvertiseId3">Linkvertise ID - Checkpoint 3:</label>
                            <input type="number" id="linkvertiseId3" name="linkvertiseId3" value="<%= settings.linkvertiseId3 %>" required>
                        </div>
                    </div>
                    
                    <div>
                        <div class="form-group">
                            <label for="webhookUrl">Discord Webhook URL:</label>
                            <input type="url" id="webhookUrl" name="webhookUrl" value="<%= settings.webhookUrl || '' %>" placeholder="https://discord.com/api/webhooks/...">
                        </div>
                        
                        <div class="form-group">
                            <label for="webhookInterval">Webhook Interval (Minutes):</label>
                            <input type="number" id="webhookInterval" name="webhookInterval" value="<%= settings.webhookInterval %>" min="5" max="1440" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="adminPassword">New Admin Password (leave empty to keep current):</label>
                            <input type="password" id="adminPassword" name="adminPassword" placeholder="Enter new password">
                        </div>
                        
                        <div class="form-group webhook-test">
                            <button type="button" class="btn btn-success" onclick="testWebhook()">üß™ Test Webhook</button>
                            <div id="webhookResult"></div>
                        </div>
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary">üíæ Save Settings</button>
            </form>
        </div>
    </div>

    <script>
        async function testWebhook() {
            const resultDiv = document.getElementById('webhookResult');
            const button = event.target;
            
            button.disabled = true;
            button.textContent = '‚è≥ Testing...';
            
            try {
                const response = await fetch('/admin/test-webhook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                resultDiv.style.display = 'block';
                if (result.success) {
                    resultDiv.style.background = '#d4edda';
                    resultDiv.style.color = '#155724';
                    resultDiv.textContent = '‚úÖ Webhook test successful!';
                } else {
                    resultDiv.style.background = '#f8d7da';
                    resultDiv.style.color = '#721c24';
                    resultDiv.textContent = '‚ùå Webhook test failed: ' + result.error;
                }
            } catch (error) {
                resultDiv.style.display = 'block';
                resultDiv.style.background = '#f8d7da';
                resultDiv.style.color = '#721c24';
                resultDiv.textContent = '‚ùå Error: ' + error.message;
            }
            
            button.disabled = false;
            button.textContent = 'üß™ Test Webhook';
            
            setTimeout(() => {
                resultDiv.style.display = 'none';
            }, 5000);
        }
        
        // Auto-refresh stats every 30 seconds
        setInterval(() => {
            location.reload();
        }, 30000);
    </script>
</body>
</html>